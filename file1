8th




UDPC.java
import java.net.*;
public class UDPC {
 public static void main(String[] args) {
 DatagramSocket socket = null;
 try {
 socket = new DatagramSocket();
 String message = "text message";
 byte[] sendBuffer = message.getBytes();
 InetAddress host = InetAddress.getByName("127.0.0.1");
 int serverPort = 6788;
 // Sending packet to server
 DatagramPacket request = new DatagramPacket(sendBuffer, sendBuffer.length, host, 
serverPort);
 socket.send(request);
 // Preparing buffer for response
 byte[] receiveBuffer = new byte[1000];
 DatagramPacket reply = new DatagramPacket(receiveBuffer, receiveBuffer.length);
 socket.receive(reply);
 String replyMsg = new String(reply.getData(), 0, reply.getLength());
 System.out.println("Client received: " + replyMsg);
 } catch (Exception e) {
 System.out.println("Client error: " + e.getMessage());
 e.printStackTrace();
 } finally {
 if (socket != null && !socket.isClosed()) {
 socket.close();
 }
 }
 }
}
UDPS.java
import java.net.*;
public class UDPS {
 public static void main(String[] args) {
 DatagramSocket socket = null;
 try {
 socket = new DatagramSocket(6788);
 byte[] buffer = new byte[1000];
System.out.println("Server is running...");
while (true) {
 DatagramPacket request = new DatagramPacket(buffer, buffer.length);
 socket.receive(request);
 String message = new String(request.getData(), 0, request.getLength());
 System.out.println("Server received: " + message);
 // Process message (e.g., append a response)
 String response = message + " - server processed";
 byte[] sendBuffer = response.getBytes();
 DatagramPacket reply = new DatagramPacket(
 sendBuffer, sendBuffer.length,
 request.getAddress(), request.getPort()
 );
 socket.send(reply);
 }
 } catch (Exception e) {
 System.out.println("Server error: " + e.getMessage());
 e.printStackTrace();
 } finally {
 if (socket != null && !socket.isClosed()) {
 socket.close();
 }
 }
 }
}





9th


Program rsa.java:
import java.util.*;
import java.io.*;
public class rsa
{
static int gcd(int m,int n)
{
while(n!=0)
{
int r=m%n;
m=n;
n=r;
}
return m;
}
public static void main(String args[])
{
int p=0,q=0,n=0,e=0,d=0,phi=0;
int nummes[]=new int[100];
int encrypted[]=new int[100];
int decrypted[]=new int[100];
int i=0,j=0,nofelem=0;
Scanner sc=new Scanner(System.in);
String message ;
System.out.println("Enter the Message to be encrypted:");
message= sc.nextLine();
System.out.println("Enter value of p and q\n");
p=sc.nextInt();
q=sc.nextInt();
n=p*q;
phi=(p-1)*(q-1);
for(i=2;i<phi;i++)
if(gcd(i,phi)==1) break;
e=i;
for(i=2;i<phi;i++)
if((e*i-1)%phi==0)
break;
d=i;
for(i=0;i<message.length();i++)
{
char c = message.charAt(i);
int a =(int)c;
nummes[i]=c-96;
}
nofelem=message.length();
for(i=0;i<nofelem;i++)
{
encrypted[i]=1;
for(j=0;j<e;j++)
encrypted[i] =(encrypted[i]*nummes[i])%n;
}
System.out.println("\n Encrypted message: ");
for(i=0;i<nofelem;i++)
{
System.out.print(encrypted[i]);
System.out.print((char)(encrypted[i]+96));
}
for(i=0;i<nofelem;i++)
{
decrypted[i]=1;
for(j=0;j<d;j++)
decrypted[i]=(decrypted[i]*encrypted[i])%n;
}
System.out.println("\n Decrypted message: ");
for(i=0;i<nofelem;i++)
System.out.print((char)(decrypted[i]+96));
System.out.println();
return;
}
}




7th




Client.java:
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.Scanner;
class Client {
 public static void main(String args[]) throws Exception {
 String address = "";
 Scanner sc = new Scanner(System.in);
 System.out.println("Enter Server Address: ");
 address = sc.nextLine();
 // Create the socket on port 5000
 Socket s = new Socket(address, 5000);
 DataInputStream din = new DataInputStream(s.getInputStream());
 DataOutputStream dout = new DataOutputStream(s.getOutputStream());
 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
 System.out.println("Send 'Get' to start...");
 String str = "", filename = "";
 try {
 // Wait until user types "start"
 while (!str.equalsIgnoreCase("start")) {
 str = br.readLine();
 }
 dout.writeUTF(str);
 dout.flush();
 filename = din.readUTF();
 System.out.println("Receiving file: " + filename);
 filename = "client_" + filename; // Rename file
 System.out.println("Saving as file: " + filename);
 long fileSize = Long.parseLong(din.readUTF());
 System.out.println("File Size: " + (fileSize / (1024 * 1024)) + " MB");
 byte[] buffer = new byte[4096];
 System.out.println("Receiving file...");
 FileOutputStream fos = new FileOutputStream(new File(filename));
long totalRead = 0;
 int bytesRead;
 while (totalRead < fileSize) {
 bytesRead = din.read(buffer, 0, (int) Math.min(buffer.length, fileSize - totalRead));
 if (bytesRead == -1) break;
 fos.write(buffer, 0, bytesRead);
 totalRead += bytesRead;
 }
 System.out.println("File download completed.");
 fos.close();
 dout.close();
 din.close();
 s.close();
 } catch (EOFException e) {
 System.out.println("EOF reached.");
 } catch (Exception e) {
 e.printStackTrace();
 }
 }
}
Server.java:
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
class Server {
 public static void main(String args[]) throws Exception {
 String filename;
 System.out.println("Enter File Name: ");
 Scanner sc = new Scanner(System.in);
 filename = sc.nextLine();
 sc.close();
 File file = new File(filename);
 if (!file.exists()) {
 System.out.println("File does not exist. Exiting.");
 return;
 }
 ServerSocket ss = new ServerSocket(5000);
 System.out.println("Server started. Waiting for request...");
 while (true) {
 Socket s = ss.accept();
 System.out.println("Connected with " + s.getInetAddress().toString());
DataInputStream din = new DataInputStream(s.getInputStream());
 DataOutputStream dout = new DataOutputStream(s.getOutputStream());
 try {
 String str = din.readUTF();
 if (str.equalsIgnoreCase("start")) {
 System.out.println("Client requested file.");
 // Send file name
 dout.writeUTF(file.getName());
 dout.flush();
 // Send file size
 long fileSize = file.length();
 dout.writeUTF(Long.toString(fileSize));
 dout.flush();
 System.out.println("Sending file: " + file.getName());
 System.out.println("File size: " + fileSize + " bytes");
 FileInputStream fin = new FileInputStream(file);
 byte[] buffer = new byte[4096];
 long totalRead = 0;
 int read;
 while ((read = fin.read(buffer)) != -1) {
 dout.write(buffer, 0, read);
 dout.flush();
 totalRead += read;
 }
 fin.close();
 System.out.println("File sent successfully.");
 } else if (str.equalsIgnoreCase("stop")) {
 System.out.println("Client sent stop request.");
 }
 } catch (Exception e) {
 e.printStackTrace();
 System.out.println("An error occurred during file transfer.");
 }
 din.close();
 dout.close();
 s.close();
 System.out.println("Connection closed. Waiting for new client...");
 }
 }
}